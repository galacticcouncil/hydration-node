{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 38,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "postgres",
        "uid": "OulRfMKVz"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 1,
          "min": 0,
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "orange",
                "value": 70
              },
              {
                "color": "red",
                "value": 85
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 12,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 3,
      "options": {
        "displayMode": "gradient",
        "minVizHeight": 10,
        "minVizWidth": 0,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "/^ratio_01$/",
          "values": true
        },
        "showUnfilled": true
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "OulRfMKVz"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH params AS\n(\n       SELECT COALESCE(To_timestamp($__to/1000), Now())                       AS to_ts,\n              COALESCE(To_timestamp($__to/1000), Now()) - interval '1 months' as from_ts ),\n-- Latest xcmRateLimit per asset (robust extraction; ignore rows without a numeric limit)\nraw_limits AS\n(\n       SELECT\n              CASE\n                     WHEN (\n                                   e.args->>'assetId') ~ '^\\d+$' THEN (e.args->>'assetId')::int\n              END AS asset_id, (\n              CASE\n                     WHEN jsonb_typeof(e.args->'xcmRateLimit') = 'number' THEN (e.args->'xcmRateLimit')::text::numeric(78,0)\n                     WHEN jsonb_typeof(e.args->'xcmRateLimit') = 'string'\n                     AND    (\n                                   e.args->>'xcmRateLimit') ~ '^\\d+$' THEN (e.args->>'xcmRateLimit')::numeric(78,0)\n                     WHEN jsonb_typeof(e.args->'xcmRateLimit') = 'object'\n                     AND    (\n                                   e.args->'xcmRateLimit' ? 'Some')\n                     AND    (\n                                   e.args->'xcmRateLimit'->>'Some') ~ '^\\d+$' THEN (e.args->'xcmRateLimit'->>'Some')::numeric(78,0)\n                     WHEN jsonb_typeof(e.args->'assetParams') = 'object'\n                     AND    (\n                                   e.args->'assetParams'->>'xcmRateLimit') ~ '^\\d+$' THEN (e.args->'assetParams'->>'xcmRateLimit')::numeric(78,0)\n                     WHEN jsonb_typeof(e.args->'update') = 'object'\n                     AND    (\n                                   e.args->'update'->>'xcmRateLimit') ~ '^\\d+$' THEN (e.args->'update'->>'xcmRateLimit')::numeric(78,0)\n                     ELSE NULL\n              END )       AS xcm_rate_limit,\n              b.timestamp AS ts,\n              b.id        AS blk\n       FROM   event e\n       JOIN   block b\n       ON     b.id = e.block_id\n       WHERE  e.NAME = 'AssetRegistry.Updated' ), limits AS\n(\n       SELECT asset_id,\n              xcm_rate_limit\n       FROM   (\n                       SELECT   asset_id,\n                                xcm_rate_limit,\n                                ts,\n                                row_number() OVER (partition BY asset_id ORDER BY ts DESC, blk DESC) AS rn\n                       FROM     raw_limits\n                       WHERE    asset_id IS NOT NULL\n                       AND      xcm_rate_limit IS NOT NULL ) s\n       WHERE  rn = 1 ),\n-- Daily net mints in the last 3 months (Deposited - Withdrawn)\ndaily AS\n(\n         SELECT   date_trunc('day', b.timestamp) AS day_ts,\n                  (e.args->>'currencyId')::int   AS asset_id,\n                  sum(\n                  CASE\n                           WHEN e.NAME = 'Tokens.Deposited' THEN (e.args->>'amount'):: numeric\n                           WHEN e.NAME = 'Tokens.Withdrawn' THEN -(e.args->>'amount')::numeric\n                           ELSE 0\n                  END ) AS net_deposits\n         FROM     event e\n         JOIN     block b\n         ON       b.id = e.block_id\n         JOIN     params p\n         ON       true\n         WHERE    e.NAME IN ('Tokens.Deposited',\n                             'Tokens.Withdrawn')\n         AND      (\n                           e.args->>'currencyId') ~ '^\\d+$'\n         AND      b.timestamp >= p.from_ts\n         AND      b.timestamp < p.to_ts\n         GROUP BY 1,\n                  2 ),\n-- Winsorize per asset (p1â€“p99)\nwins AS\n(\n       SELECT d.asset_id,\n              d.day_ts,\n              CASE\n                     WHEN d.net_deposits < px.p1 THEN px.p1\n                     WHEN d.net_deposits > px.p99 THEN px.p99\n                     ELSE d.net_deposits\n              END AS net_deposits_wins\n       FROM   daily d\n       JOIN\n              (\n                       SELECT   asset_id,\n                                percentile_cont(0.00) within GROUP (ORDER BY net_deposits) AS p1,\n                                percentile_cont(1.00) within GROUP (ORDER BY net_deposits) AS p99\n                       FROM     daily\n                       GROUP BY asset_id ) px\n       using  (asset_id) ),\n-- Max winsorized daily net mints per asset in window\nper_asset AS\n(\n         SELECT   asset_id,\n                  floor(max(net_deposits_wins))::numeric(78,0) AS max_daily_winsorized\n         FROM     wins\n         GROUP BY asset_id )\n-- Final: include every asset that has a limit; show 0 for those with no activity in window\nSELECT \n  l.asset_id::text AS asset_id,\n  (COALESCE(pa.max_daily_winsorized, 0) / NULLIF(l.xcm_rate_limit, 0))::double precision AS ratio_01\nFROM limits l\nLEFT JOIN per_asset pa USING (asset_id)\nORDER BY l.asset_id;",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Max Mint Limit - Gauge Bar Chart",
      "transformations": [],
      "type": "bargauge"
    },
    {
      "datasource": {
        "type": "postgres",
        "uid": "OulRfMKVz"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "fillOpacity": 80,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineWidth": 2,
            "scaleDistribution": {
              "type": "linear"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "percentage",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "orange",
                "value": 70
              },
              {
                "color": "red",
                "value": 85
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "xcmratelimit"
            },
            "properties": [
              {
                "id": "custom.hideFrom",
                "value": {
                  "legend": true,
                  "tooltip": false,
                  "viz": true
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 11,
        "w": 12,
        "x": 6,
        "y": 12
      },
      "id": 2,
      "options": {
        "barRadius": 0,
        "barWidth": 0.95,
        "groupWidth": 0.7,
        "legend": {
          "calcs": [],
          "displayMode": "list",
          "placement": "right",
          "showLegend": false
        },
        "orientation": "auto",
        "showValue": "never",
        "stacking": "normal",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        },
        "xField": "asset_id",
        "xTickLabelRotation": 90,
        "xTickLabelSpacing": 0
      },
      "pluginVersion": "9.3.6",
      "targets": [
        {
          "datasource": {
            "type": "postgres",
            "uid": "OulRfMKVz"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH params AS (\n  SELECT COALESCE(to_timestamp($__to/1000), now()) AS to_ts,\n         COALESCE(to_timestamp($__to/1000), now()) - interval '1 months' AS from_ts\n),\nraw_limits AS (\n  SELECT\n    CASE WHEN (e.args->>'assetId') ~ '^\\d+$' THEN (e.args->>'assetId')::int END AS asset_id,\n    CASE\n      WHEN jsonb_typeof(e.args->'xcmRateLimit') = 'number' THEN (e.args->'xcmRateLimit')::text::numeric(78,0)\n      WHEN jsonb_typeof(e.args->'xcmRateLimit') = 'string' AND (e.args->>'xcmRateLimit') ~ '^\\d+$'\n        THEN (e.args->>'xcmRateLimit')::numeric(78,0)\n      WHEN jsonb_typeof(e.args->'xcmRateLimit') = 'object'\n        AND (e.args->'xcmRateLimit' ? 'Some')\n        AND (e.args->'xcmRateLimit'->>'Some') ~ '^\\d+$'\n        THEN (e.args->'xcmRateLimit'->>'Some')::numeric(78,0)\n      WHEN jsonb_typeof(e.args->'assetParams') = 'object'\n        AND (e.args->'assetParams'->>'xcmRateLimit') ~ '^\\d+$'\n        THEN (e.args->'assetParams'->>'xcmRateLimit')::numeric(78,0)\n      WHEN jsonb_typeof(e.args->'update') = 'object'\n        AND (e.args->'update'->>'xcmRateLimit') ~ '^\\d+$'\n        THEN (e.args->'update'->>'xcmRateLimit')::numeric(78,0)\n      ELSE NULL\n    END AS xcm_rate_limit,\n    b.timestamp AS ts,\n    b.id AS blk\n  FROM event e\n  JOIN block b ON b.id = e.block_id\n  WHERE e.name = 'AssetRegistry.Updated'\n),\nlimits AS (\n  SELECT asset_id, xcm_rate_limit\n  FROM (\n    SELECT asset_id, xcm_rate_limit, ts,\n           row_number() OVER (PARTITION BY asset_id ORDER BY ts DESC, blk DESC) AS rn\n    FROM raw_limits\n    WHERE asset_id IS NOT NULL AND xcm_rate_limit IS NOT NULL\n  ) s\n  WHERE rn = 1\n),\ndaily AS (\n  SELECT date_trunc('day', b.timestamp) AS day_ts,\n         (e.args->>'currencyId')::int    AS asset_id,\n         sum(CASE\n               WHEN e.name = 'Tokens.Deposited'  THEN (e.args->>'amount')::numeric\n               WHEN e.name = 'Tokens.Withdrawn' THEN -(e.args->>'amount')::numeric\n               ELSE 0\n             END) AS net_deposits\n  FROM event e\n  JOIN block b ON b.id = e.block_id\n  JOIN params p ON TRUE\n  WHERE e.name IN ('Tokens.Deposited','Tokens.Withdrawn')\n    AND (e.args->>'currencyId') ~ '^\\d+$'\n    AND b.timestamp >= p.from_ts\n    AND b.timestamp <  p.to_ts\n  GROUP BY 1,2\n),\n-- Winsorize 0â€“100% to be robust; adjust if you want 1â€“99%\nwins AS (\n  SELECT d.asset_id, d.day_ts,\n         CASE\n           WHEN d.net_deposits < px.p1  THEN px.p1\n           WHEN d.net_deposits > px.p99 THEN px.p99\n           ELSE d.net_deposits\n         END AS net_deposits_wins\n  FROM daily d\n  JOIN (\n    SELECT asset_id,\n           percentile_cont(0.00) WITHIN GROUP (ORDER BY net_deposits) AS p1,\n           percentile_cont(1.00) WITHIN GROUP (ORDER BY net_deposits) AS p99\n    FROM daily\n    GROUP BY asset_id\n  ) px USING (asset_id)\n),\nper_asset AS (\n  SELECT asset_id,\n         floor(max(net_deposits_wins))::numeric(78,0) AS max_daily_winsorized\n  FROM wins\n  GROUP BY asset_id\n)\nSELECT\n  l.asset_id::text AS asset_id,                                    -- X axis category\n  /* ratio clamped to [0,1] then to % */\n  (LEAST(GREATEST((COALESCE(pa.max_daily_winsorized,0)\n                   / NULLIF(l.xcm_rate_limit,0))::double precision, 0.0), 1.0) * 100.0) AS used_pct,\n  (100.0 - LEAST(GREATEST((COALESCE(pa.max_daily_winsorized,0)\n                   / NULLIF(l.xcm_rate_limit,0))::double precision, 0.0), 1.0) * 100.0) AS headroom_pct,\n  l.xcm_rate_limit AS xcmratelimit\nFROM limits l\nLEFT JOIN per_asset pa USING (asset_id)\nORDER BY l.asset_id;\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Max Mint Limit - Bar Chart",
      "type": "barchart"
    }
  ],
  "schemaVersion": 37,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": []
  },
  "time": {
    "from": "now-6h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Mint Levels",
  "uid": "gPmT6nXHz",
  "version": 22,
  "weekStart": ""
}