// This file is part of HydraDX.

// Copyright (C) 2020-2024  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


//! Autogenerated weights for `pallet_token_gateway`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-09-16, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bench-bot`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./bin/hydradx
// benchmark
// pallet
// --wasm-execution=compiled
// --pallet
// pallet_token_gateway
// --extrinsic
// *
// --heap-pages
// 4096
// --steps
// 50
// --repeat
// 20
// --template
// scripts/pallet-weight-template.hbs
// --output
// runtime/hydradx/src/weights/pallet_token_gateway.rs
// --quiet

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;
use crate::*;

/// Weights for `pallet_token_gateway`.
pub struct WeightInfo<T>(PhantomData<T>);

/// Weights for `pallet_token_gateway` using the HydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_token_gateway::WeightInfo for HydraWeight<T> {
	/// Storage: `Hyperbridge::HostParams` (r:1 w:0)
	/// Proof: `Hyperbridge::HostParams` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Ismp::Nonce` (r:1 w:1)
	/// Proof: `Ismp::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::Precisions` (r:0 w:100)
	/// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::NativeAssets` (r:0 w:1)
	/// Proof: `TokenGateway::NativeAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::LocalAssets` (r:0 w:1)
	/// Proof: `TokenGateway::LocalAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::SupportedAssets` (r:0 w:1)
	/// Proof: `TokenGateway::SupportedAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e74736bfb8d86a7e3d7ddac4069f644f9` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e74736bfb8d86a7e3d7ddac4069f644f9` (r:1 w:1)
	/// The range of component `x` is `[1, 100]`.
	fn create_erc6160_asset(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `557`
		//  Estimated: `4022`
		// Minimum execution time: 48_985_000 picoseconds.
		Weight::from_parts(49_561_196, 4022)
			// Standard Error: 2_382
			.saturating_add(Weight::from_parts(2_029_166, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
	}
	/// Storage: `TokenGateway::SupportedAssets` (r:1 w:0)
	/// Proof: `TokenGateway::SupportedAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::NativeAssets` (r:1 w:0)
	/// Proof: `TokenGateway::NativeAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	/// Storage: `TokenGateway::Precisions` (r:1 w:0)
	/// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `Ismp::Nonce` (r:1 w:1)
	/// Proof: `Ismp::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e7473737e6057b96e21dfa8a165ca4184` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e7473737e6057b96e21dfa8a165ca4184` (r:1 w:1)
	fn teleport() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `940`
		//  Estimated: `4405`
		// Minimum execution time: 108_802_000 picoseconds.
		Weight::from_parts(110_076_000, 4405)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: `TokenGateway::TokenGatewayAddresses` (r:0 w:1)
	/// Proof: `TokenGateway::TokenGatewayAddresses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 100]`.
	fn set_token_gateway_addresses(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_655_000 picoseconds.
		Weight::from_parts(7_958_092, 0)
			// Standard Error: 98
			.saturating_add(Weight::from_parts(219, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: `Hyperbridge::HostParams` (r:1 w:0)
	/// Proof: `Hyperbridge::HostParams` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `Ismp::Nonce` (r:1 w:1)
	/// Proof: `Ismp::Nonce` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e747315d56829f8fa8b22d9c5bbd2558b` (r:1 w:1)
	/// Proof: UNKNOWN KEY `0x52657175657374436f6d6d69746d656e747315d56829f8fa8b22d9c5bbd2558b` (r:1 w:1)
	fn update_erc6160_asset() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `723`
		//  Estimated: `4188`
		// Minimum execution time: 42_269_000 picoseconds.
		Weight::from_parts(42_751_000, 4188)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `TokenGateway::Precisions` (r:0 w:100)
	/// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `x` is `[1, 100]`.
	fn update_asset_precision(x: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_472_000 picoseconds.
		Weight::from_parts(6_133_396, 0)
			// Standard Error: 2_019
			.saturating_add(Weight::from_parts(2_028_091, 0).saturating_mul(x.into()))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(x.into())))
	}
}