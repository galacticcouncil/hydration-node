// This file is part of HydraDX.

// Copyright (C) 2020-2024  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


//! Autogenerated weights for `pallet_dispatcher`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-07-29, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `bench-bot`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./bin/hydradx
// benchmark
// pallet
// --wasm-execution=compiled
// --pallet
// pallet_dispatcher
// --extrinsic
// *
// --heap-pages
// 4096
// --steps
// 50
// --repeat
// 20
// --template
// scripts/pallet-weight-template.hbs
// --output
// runtime/hydradx/src/weights/pallet_dispatcher.rs
// --quiet

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;
use crate::*;

/// Weights for `pallet_dispatcher`.
pub struct WeightInfo<T>(PhantomData<T>);

/// Weights for `pallet_dispatcher` using the HydraDX node and recommended hardware.
pub struct HydraWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_dispatcher::WeightInfo for HydraWeight<T> {
	/// The range of component `n` is `[1, 10000]`.
	fn dispatch_as_treasury(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 12_659_000 picoseconds.
		Weight::from_parts(13_070_538, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_357, 0).saturating_mul(n.into()))
	}
	/// Storage: `Dispatcher::AaveManagerAccount` (r:1 w:0)
	/// Proof: `Dispatcher::AaveManagerAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	/// The range of component `n` is `[1, 10000]`.
	fn dispatch_as_aave_manager(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `1517`
		// Minimum execution time: 13_650_000 picoseconds.
		Weight::from_parts(14_110_335, 1517)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(1_344, 0).saturating_mul(n.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: `Dispatcher::AaveManagerAccount` (r:0 w:1)
	/// Proof: `Dispatcher::AaveManagerAccount` (`max_values`: Some(1), `max_size`: Some(32), added: 527, mode: `MaxEncodedLen`)
	fn note_aave_manager() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 4_289_000 picoseconds.
		Weight::from_parts(4_456_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// The range of component `n` is `[1, 10000]`.
	fn dispatch_with_extra_gas(n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_977_000 picoseconds.
		Weight::from_parts(7_224_485, 0)
			// Standard Error: 1
			.saturating_add(Weight::from_parts(467, 0).saturating_mul(n.into()))
	}
}