// This file is part of HydraDX.

// Copyright (C) 2020-2024  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for `pallet_token_gateway_ismp`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-10-07, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/hydradx
// benchmark
// pallet
// --wasm-execution=compiled
// --pallet
// pallet_token_gateway_ismp
// --extrinsic
// *
// --heap-pages
// 4096
// --steps
// 50
// --repeat
// 20
// --template
// scripts/ismp-module-weight-template.hbs
// --output
// runtime/hydradx/src/weights/pallet_token_gateway_ismp.rs
// --quiet

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Ismp module handlers' weights for `pallet_token_gateway_ismp`.
pub struct IsmpWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> IsmpWeight<T> {
	// Storage: `TokenGateway::TokenGatewayAddresses` (r:1 w:0)
	// Proof: `TokenGateway::TokenGatewayAddresses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TokenGateway::LocalAssets` (r:1 w:0)
	// Proof: `TokenGateway::LocalAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TokenGateway::Precisions` (r:1 w:0)
	// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TokenGateway::NativeAssets` (r:1 w:0)
	// Proof: `TokenGateway::NativeAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1 w:0)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	pub(crate) fn on_accept() -> Weight {
		Weight::from_parts(43_000_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(5_u64))
	}
	pub(crate) fn on_response() -> Weight {
		Weight::from_parts(1_000_000_u64, 0)
	}
	// Storage: `TokenGateway::LocalAssets` (r:1 w:0)
	// Proof: `TokenGateway::LocalAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TokenGateway::Precisions` (r:1 w:0)
	// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `TokenGateway::NativeAssets` (r:1 w:0)
	// Proof: `TokenGateway::NativeAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `System::Account` (r:1 w:0)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	pub(crate) fn on_timeout() -> Weight {
		Weight::from_parts(38_000_000_u64, 0)
			.saturating_add(T::DbWeight::get().reads(4_u64))
	}
}
