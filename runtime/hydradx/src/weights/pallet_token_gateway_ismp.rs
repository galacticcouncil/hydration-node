// This file is part of HydraDX.

// Copyright (C) 2020-2024  Intergalactic, Limited (GIB).
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


//! Autogenerated weights for `pallet_token_gateway_ismp`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 43.0.0
//! DATE: 2025-10-03, STEPS: `50`, REPEAT: `20`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `MacBook-Pro-Vladislav.local`, CPU: `<UNKNOWN>`
//! WASM-EXECUTION: `Compiled`, CHAIN: `None`, DB CACHE: `1024`

// Executed Command:
// ./target/release/hydradx
// benchmark
// pallet
// --wasm-execution=compiled
// --pallet
// pallet_token_gateway_ismp
// --extrinsic
// *
// --heap-pages
// 4096
// --steps
// 50
// --repeat
// 20
// --template
// scripts/pallet-weight-template.hbs
// --output
// runtime/hydradx/src/weights/pallet_token_gateway_ismp.rs
// --quiet

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;
use crate::*;

/// Weights for `pallet_token_gateway_ismp`.
pub struct WeightInfo<T>(PhantomData<T>);

/// Weights for `pallet_token_gateway_ismp` using the HydraDX node and recommended hardware.
impl<T: frame_system::Config> WeightInfo<T> {
	/// Storage: `TokenGateway::TokenGatewayAddresses` (r:1 w:0)
	/// Proof: `TokenGateway::TokenGatewayAddresses` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::LocalAssets` (r:1 w:0)
	/// Proof: `TokenGateway::LocalAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::Precisions` (r:1 w:0)
	/// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::NativeAssets` (r:1 w:0)
	/// Proof: `TokenGateway::NativeAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	pub fn on_accept() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1752`
		//  Estimated: `5217`
		// Minimum execution time: 42_000_000 picoseconds.
		Weight::from_parts(43_000_000, 5217)
			.saturating_add(T::DbWeight::get().reads(5_u64))
	}
	pub fn on_response() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 0_000 picoseconds.
		Weight::from_parts(1_000_000, 0)
	}
	/// Storage: `TokenGateway::LocalAssets` (r:1 w:0)
	/// Proof: `TokenGateway::LocalAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::Precisions` (r:1 w:0)
	/// Proof: `TokenGateway::Precisions` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `TokenGateway::NativeAssets` (r:1 w:0)
	/// Proof: `TokenGateway::NativeAssets` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	pub fn on_timeout() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1695`
		//  Estimated: `5160`
		// Minimum execution time: 37_000_000 picoseconds.
		Weight::from_parts(40_000_000, 5160)
			.saturating_add(T::DbWeight::get().reads(4_u64))
	}
}